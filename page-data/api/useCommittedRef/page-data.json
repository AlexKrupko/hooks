{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useCommittedRef","result":{"data":{"docpocalypse":{"id":"b04cac53-d66d-57b9-927e-de46914a7faa","tsType":{"id":"c8fd5081-3529-5704-80c4-1f7b340c5c0d","name":"useCommittedRef","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"973e27e9-b92d-5cc8-b23f-e2c45cb6db97","name":"useCommittedRef","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a `Ref` whose value is updated in an effect, ensuring the most recent\nvalue is the one rendered with. Generally only required for Concurrent mode usage\nwhere previous work in `render()` may be discarded befor being used.","text":"This is safe to access in an event handler.\n"},"typeParameter":[{"id":"a445dc30-df84-5a7d-afb8-14cca79a87df","name":"TValue","kind":131072,"kindString":"Type parameter","flags":{},"parent":"973e27e9-b92d-5cc8-b23f-e2c45cb6db97","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"parameters":[{"id":"791f45ca-a669-5ee3-bcc7-2bb821e74772","name":"value","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"The `Ref` value\n"},"type":{"type":"typeParameter","name":"TValue"},"parent":"973e27e9-b92d-5cc8-b23f-e2c45cb6db97","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null,"description":{"id":"e31c37e5-1a5f-5929-b5c6-5e8486b4dbba","parent":"791f45ca-a669-5ee3-bcc7-2bb821e74772","mdx":{"id":"4ecace89-7667-51c5-9842-ea1502f13cbc","parent":"e31c37e5-1a5f-5929-b5c6-5e8486b4dbba","frontmatter":{"title":""},"exports":{},"rawBody":"The `Ref` value\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \" value\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"99a2a210-6f51-5eee-a246-2040d97b956d","parent":"e31c37e5-1a5f-5929-b5c6-5e8486b4dbba","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"The `Ref` value\n","html":"<p>The <code>Ref</code> value</p>"}}}],"type":{"type":"reference","typeArguments":[{"type":"typeParameter","name":"TValue"}],"name":"MutableRefObject"},"parent":"c8fd5081-3529-5704-80c4-1f7b340c5c0d","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useCommittedRef.ts","description":{"id":"62651b37-ba38-50ca-aecc-385a8b065e0a","parent":"973e27e9-b92d-5cc8-b23f-e2c45cb6db97","mdx":{"id":"691b269f-ad78-57bd-9952-7774cc3114cb","parent":"62651b37-ba38-50ca-aecc-385a8b065e0a","frontmatter":{"title":""},"exports":{},"rawBody":"Creates a `Ref` whose value is updated in an effect, ensuring the most recent\nvalue is the one rendered with. Generally only required for Concurrent mode usage\nwhere previous work in `render()` may be discarded befor being used.\nThis is safe to access in an event handler.\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Creates a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \" whose value is updated in an effect, ensuring the most recent\\nvalue is the one rendered with. Generally only required for Concurrent mode usage\\nwhere previous work in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render()\"), \" may be discarded befor being used.\\nThis is safe to access in an event handler.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"e25ea571-3ec7-57f6-80af-1bfa362b7418","parent":"62651b37-ba38-50ca-aecc-385a8b065e0a","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"Creates a `Ref` whose value is updated in an effect, ensuring the most recent\nvalue is the one rendered with. Generally only required for Concurrent mode usage\nwhere previous work in `render()` may be discarded befor being used.\nThis is safe to access in an event handler.\n","html":"<p>Creates a <code>Ref</code> whose value is updated in an effect, ensuring the most recent\nvalue is the one rendered with. Generally only required for Concurrent mode usage\nwhere previous work in <code>render()</code> may be discarded befor being used.\nThis is safe to access in an event handler.</p>"}}}],"parent":"a327d514-86cc-5701-9ec1-bc8e50ca3bc2","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useCommittedRef.ts"},"type":"hook","name":"useCommittedRef","packageName":"@restart/hooks","importName":"import useCommittedRef from '@restart/hooks/useCommittedRef'","tags":[{"name":"param","value":"The `Ref` value"}],"example":null,"signatures":[{"kind":"function","name":"useCommittedRef","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Creates a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \" whose value is updated in an effect, ensuring the most recent\\nvalue is the one rendered with. Generally only required for Concurrent mode usage\\nwhere previous work in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render()\"), \" may be discarded befor being used.\"), mdx(\"p\", null, \"This is safe to access in an event handler.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":[{"name":"value","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \" value\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":null,"type":{"typeDef":null,"name":"TValue","type":"NameExpression","elements":null,"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null}],"properties":null,"optional":false,"returns":[{"name":null,"description":null,"optional":false,"type":{"name":null,"type":"TypeApplication","elements":null,"expression":{"type":"NameExpression","name":"React.MutableRefObject","typeDef___NODE":null},"applications":[{"type":"NameExpression","name":"TValue","typeDef___NODE":null}]}}],"members":{"static":null}}]}},"pageContext":{"nodeId":"b04cac53-d66d-57b9-927e-de46914a7faa","exampleId":null}}}
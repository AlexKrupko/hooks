{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/usePrevious","result":{"data":{"docpocalypse":{"id":"a6f86fb0-1810-586a-a7c2-bbbe376f71b8","tsType":{"id":"9077001b-6b55-51e1-a1a9-d46eb8a83e31","name":"usePrevious","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"a6d67e01-b9d4-563f-9cbe-cad817f8c11a","name":"usePrevious","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Store the last of some value. Tracked via a `Ref` only updating it\nafter the component renders.","text":"Helpful if you need to compare a prop value to it's previous value during render.\n\n```ts\nfunction Component(props) {\n  const lastProps = usePrevious(props)\n\n  if (lastProps.foo !== props.foo)\n    resetValueFromProps(props.foo)\n}\n```\n"},"typeParameter":[{"id":"25135003-3c1a-5a29-98ef-ab9d256b40a3","name":"T","kind":131072,"kindString":"Type parameter","flags":{"isExported":true},"parent":"a6d67e01-b9d4-563f-9cbe-cad817f8c11a","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"parameters":[{"id":"0d3e8c90-6165-5c9d-b5fd-99b4ed9a50f6","name":"value","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"comment":{"text":"the value to track\n"},"type":{"type":"typeParameter","name":"T"},"parent":"a6d67e01-b9d4-563f-9cbe-cad817f8c11a","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null,"description":{"id":"60804d21-5024-5afc-8984-46160af8d254","parent":"0d3e8c90-6165-5c9d-b5fd-99b4ed9a50f6","mdx":{"id":"023ea3f5-afcd-59b2-ba55-cb78151c0f97","parent":"60804d21-5024-5afc-8984-46160af8d254","frontmatter":{"title":""},"exports":{},"rawBody":"the value to track\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"the value to track\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"8e27a94c-ac60-561e-a6f1-0d7ed86bf935","parent":"60804d21-5024-5afc-8984-46160af8d254","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"the value to track\n","html":"<p>the value to track</p>"}}}],"type":{"type":"union","types":[{"type":"typeParameter","name":"T"},{"type":"intrinsic","name":"null"}]},"parent":"9077001b-6b55-51e1-a1a9-d46eb8a83e31","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/usePrevious.ts","description":{"id":"2f325157-310b-5229-974b-f6d72777a02c","parent":"a6d67e01-b9d4-563f-9cbe-cad817f8c11a","mdx":{"id":"834d3616-5bdb-5df2-836b-914bf132e5c2","parent":"2f325157-310b-5229-974b-f6d72777a02c","frontmatter":{"title":""},"exports":{},"rawBody":"Store the last of some value. Tracked via a `Ref` only updating it\nafter the component renders.\nHelpful if you need to compare a prop value to it's previous value during render.\n\n```ts\nfunction Component(props) {\n  const lastProps = usePrevious(props)\n\n  if (lastProps.foo !== props.foo)\n    resetValueFromProps(props.foo)\n}\n```\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Store the last of some value. Tracked via a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \" only updating it\\nafter the component renders.\\nHelpful if you need to compare a prop value to it's previous value during render.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function Component(props) {\\n  const lastProps = usePrevious(props)\\n\\n  if (lastProps.foo !== props.foo)\\n    resetValueFromProps(props.foo)\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"3100dbe5-2579-51ed-b916-b795ead80f9c","parent":"2f325157-310b-5229-974b-f6d72777a02c","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"Store the last of some value. Tracked via a `Ref` only updating it\nafter the component renders.\nHelpful if you need to compare a prop value to it's previous value during render.\n\n```ts\nfunction Component(props) {\n  const lastProps = usePrevious(props)\n\n  if (lastProps.foo !== props.foo)\n    resetValueFromProps(props.foo)\n}\n```\n","html":"<p>Store the last of some value. Tracked via a <code>Ref</code> only updating it\nafter the component renders.\nHelpful if you need to compare a prop value to it's previous value during render.</p>\n<pre><code class=\"language-ts\">function Component(props) {\n  const lastProps = usePrevious(props)\n\n  if (lastProps.foo !== props.foo)\n    resetValueFromProps(props.foo)\n}\n</code></pre>"}}}],"parent":"bb061452-d78f-5a71-8788-b64f79a28aee","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/usePrevious.ts"},"type":"hook","name":"usePrevious","packageName":"@restart/hooks","importName":"import usePrevious from '@restart/hooks/usePrevious'","tags":[{"name":"param","value":"the value to track"}],"example":null,"signatures":[{"kind":"function","name":"usePrevious","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Store the last of some value. Tracked via a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \" only updating it\\nafter the component renders.\"), mdx(\"p\", null, \"Helpful if you need to compare a prop value to it's previous value during render.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function Component(props) {\\n  const lastProps = usePrevious(props)\\n\\n  if (lastProps.foo !== props.foo)\\n    resetValueFromProps(props.foo)\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":[{"name":"value","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"the value to track\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":null,"type":{"typeDef":null,"name":"T","type":"NameExpression","elements":null,"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null}],"properties":null,"optional":false,"returns":[{"name":null,"description":null,"optional":false,"type":{"name":null,"type":"UnionType","elements":[{"type":"NameExpression","name":"T","typeDef___NODE":null},{"type":"NullLiteral"}],"expression":null,"applications":null}}],"members":{"static":null}}]}},"pageContext":{"nodeId":"a6f86fb0-1810-586a-a7c2-bbbe376f71b8","exampleId":null}}}
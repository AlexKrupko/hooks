{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useUpdateEffect","result":{"data":{"docpocalypse":{"id":"e8e95374-78b9-53ab-bfc6-5450ec18b347","tsType":{"id":"92a02f9a-791e-5b67-bb81-6155f08bcbcf","name":"useUpdateEffect","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"28ab3b81-78b7-59ca-8ff0-9d601bcefb45","name":"useUpdateEffect","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs an effect only when the dependencies have changed, skipping the\ninitial \"on mount\" run. Caution, if the dependency list never changes,\nthe effect is **never run**","text":"```ts\n const ref = useRef<HTMLInput>(null);\n\n // focuses an element only if the focus changes, and not on mount\n useUpdateEffect(() => {\n   const element = ref.current?.children[focusedIdx] as HTMLElement\n\n   element?.focus()\n\n }, [focusedIndex])\n```"},"parameters":[{"id":"7671f5a2-ef5b-50ff-9588-1e2f6e5772b5","name":"fn","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"EffectCallback"},"parent":"28ab3b81-78b7-59ca-8ff0-9d601bcefb45","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null},{"id":"b3c8f9d3-8f0c-5474-8e55-c35bfc9fc1ce","name":"deps","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"DependencyList"},"parent":"28ab3b81-78b7-59ca-8ff0-9d601bcefb45","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"void"},"parent":"92a02f9a-791e-5b67-bb81-6155f08bcbcf","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useUpdateEffect.ts","description":{"id":"109f2e39-7bbf-595b-abe2-73961213a3ce","parent":"28ab3b81-78b7-59ca-8ff0-9d601bcefb45","mdx":{"id":"b5b640b2-8eab-5353-beac-d5d90fd3665d","parent":"109f2e39-7bbf-595b-abe2-73961213a3ce","frontmatter":{"title":""},"exports":{},"rawBody":"Runs an effect only when the dependencies have changed, skipping the\ninitial \"on mount\" run. Caution, if the dependency list never changes,\nthe effect is **never run**\n```ts\n const ref = useRef<HTMLInput>(null);\n\n // focuses an element only if the focus changes, and not on mount\n useUpdateEffect(() => {\n   const element = ref.current?.children[focusedIdx] as HTMLElement\n\n   element?.focus()\n\n }, [focusedIndex])\n```","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Runs an effect only when the dependencies have changed, skipping the\\ninitial \\\"on mount\\\" run. Caution, if the dependency list never changes,\\nthe effect is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"never run\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \" const ref = useRef<HTMLInput>(null);\\n\\n // focuses an element only if the focus changes, and not on mount\\n useUpdateEffect(() => {\\n   const element = ref.current?.children[focusedIdx] as HTMLElement\\n\\n   element?.focus()\\n\\n }, [focusedIndex])\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"77b6a89a-6258-5b89-a950-73f243af09ba","parent":"109f2e39-7bbf-595b-abe2-73961213a3ce","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"Runs an effect only when the dependencies have changed, skipping the\ninitial \"on mount\" run. Caution, if the dependency list never changes,\nthe effect is **never run**\n```ts\n const ref = useRef<HTMLInput>(null);\n\n // focuses an element only if the focus changes, and not on mount\n useUpdateEffect(() => {\n   const element = ref.current?.children[focusedIdx] as HTMLElement\n\n   element?.focus()\n\n }, [focusedIndex])\n```","html":"<p>Runs an effect only when the dependencies have changed, skipping the\ninitial \"on mount\" run. Caution, if the dependency list never changes,\nthe effect is <strong>never run</strong></p>\n<pre><code class=\"language-ts\"> const ref = useRef&#x3C;HTMLInput>(null);\n\n // focuses an element only if the focus changes, and not on mount\n useUpdateEffect(() => {\n   const element = ref.current?.children[focusedIdx] as HTMLElement\n\n   element?.focus()\n\n }, [focusedIndex])\n</code></pre>"}}}],"parent":"5804071f-d20a-556c-aff8-7ce732018e49","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useUpdateEffect.ts"},"type":"hook","name":"useUpdateEffect","packageName":"@restart/hooks","importName":"import useUpdateEffect from '@restart/hooks/useUpdateEffect'","tags":[{"name":"param","value":"An effect to run on mount"},{"name":"category","value":"effects"}],"example":null,"signatures":[{"kind":"function","name":"useUpdateEffect","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Runs an effect only when the dependencies have changed, skipping the\\ninitial \\\"on mount\\\" run. Caution, if the dependency list never changes,\\nthe effect is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"never run\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \" const ref = useRef<HTMLInput>(null);\\n\\n // focuses an element only if the focus changes, and not on mount\\n useUpdateEffect(() => {\\n   const element = ref.current?.children[focusedIdx] as HTMLElement\\n\\n   element?.focus()\\n\\n }, [focusedIndex])\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":[{"name":"fn","description":null,"examples":null,"type":{"typeDef":null,"name":"EffectCallback","type":"NameExpression","elements":null,"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null},{"name":"deps","description":null,"examples":null,"type":{"typeDef":null,"name":"DependencyList","type":"NameExpression","elements":null,"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null},{"name":"effect","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"An effect to run on mount\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":null,"type":null,"optional":false,"params":null,"properties":null,"returns":null,"members":null}],"properties":null,"optional":false,"returns":null,"members":{"static":null}}]}},"pageContext":{"nodeId":"e8e95374-78b9-53ab-bfc6-5450ec18b347","exampleId":null}}}
{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useTimeout","result":{"data":{"docpocalypse":{"id":"d612a819-03bc-56e8-a817-718d3396bf01","tsType":{"id":"00e31c62-9195-548d-a16d-bab534c3268b","name":"useTimeout","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"266272c4-4b9b-54c6-9892-d67d82653fed","name":"useTimeout","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Returns a controller object for setting a timeout that is properly cleaned up\nonce the component unmounts. New timeouts cancel and replace existing ones."},"type":{"type":"reflection","declaration":{"id":"0c24f98c-61d3-5774-a09e-8917d870c5ec","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"groups":[{"title":"Variables","kind":32,"children":["0646c3ff-7910-5b02-b334-fb3a2a7c4604","cadb717d-0c17-57b9-a608-6a307f7929cd"]}],"parent":"266272c4-4b9b-54c6-9892-d67d82653fed","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[{"id":"0646c3ff-7910-5b02-b334-fb3a2a7c4604","name":"clear","kind":32,"kindString":"Variable","flags":{"isExported":true},"type":{"type":"reference","name":"clear"},"parent":"0c24f98c-61d3-5774-a09e-8917d870c5ec","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useTimeout.ts"},{"id":"cadb717d-0c17-57b9-a608-6a307f7929cd","name":"set","kind":32,"kindString":"Variable","flags":{"isExported":true},"type":{"type":"reference","name":"set"},"parent":"0c24f98c-61d3-5774-a09e-8917d870c5ec","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useTimeout.ts"}],"signatures":[],"parameters":[],"typeParameter":[],"absolutePath":null}},"parent":"00e31c62-9195-548d-a16d-bab534c3268b","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useTimeout.ts","description":{"id":"1c05b595-1d06-54fa-bc24-fd37c850cb43","parent":"266272c4-4b9b-54c6-9892-d67d82653fed","mdx":{"id":"3ea50d30-276d-5c5a-960a-f34b9d6f16a9","parent":"1c05b595-1d06-54fa-bc24-fd37c850cb43","frontmatter":{"title":""},"exports":{},"rawBody":"Returns a controller object for setting a timeout that is properly cleaned up\nonce the component unmounts. New timeouts cancel and replace existing ones.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Returns a controller object for setting a timeout that is properly cleaned up\\nonce the component unmounts. New timeouts cancel and replace existing ones.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"9cd43da5-6b37-5333-8419-f81fb17487cf","parent":"1c05b595-1d06-54fa-bc24-fd37c850cb43","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"Returns a controller object for setting a timeout that is properly cleaned up\nonce the component unmounts. New timeouts cancel and replace existing ones.","html":"<p>Returns a controller object for setting a timeout that is properly cleaned up\nonce the component unmounts. New timeouts cancel and replace existing ones.</p>"}}}],"parent":"a84ba4d3-4a40-5a4f-bf2c-bcbd063a22a4","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useTimeout.ts"},"type":"hook","name":"useTimeout","packageName":"@restart/hooks","importName":"import useTimeout from '@restart/hooks/useTimeout'","tags":[],"example":null,"signatures":[{"kind":"function","name":"useTimeout","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Returns a controller object for setting a timeout that is properly cleaned up\\nonce the component unmounts. New timeouts cancel and replace existing ones.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":null,"properties":null,"optional":false,"returns":null,"members":{"static":null}}]}},"pageContext":{"nodeId":"d612a819-03bc-56e8-a817-718d3396bf01","exampleId":null}}}
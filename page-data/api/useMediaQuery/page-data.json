{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useMediaQuery","result":{"data":{"docpocalypse":{"id":"1f5a43db-10dc-547a-8c2c-ed20b7106b02","tsType":{"id":"8fbec567-4b9b-51db-8d1e-52f828dbc4d7","name":"useMediaQuery","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"43a91b34-11c0-56f3-9051-f59a1c17c3ab","name":"useMediaQuery","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Match a media query and get updates as the match changes. The media string is\npassed directly to `window.matchMedia` and run as a Layout Effect, so initial\nmatches are returned before the browser has a chance to paint.","text":"```tsx\nfunction Page() {\n  const isWide = useMediaQuery('min-width: 1000px')\n\n  return isWide ? \"very wide\" : 'not so wide'\n}\n```\n\nMedia query lists are also reused globally, hook calls for the same query\nwill only create a matcher once under the hood.\n"},"parameters":[{"id":"0d2b6993-c82c-5b07-b5dc-dd2f02c5bd08","name":"query","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"comment":{"text":"A media query\n"},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"null"}]},"parent":"43a91b34-11c0-56f3-9051-f59a1c17c3ab","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null,"description":{"id":"1474b231-db1b-5d78-ab10-90dc1226b0a7","parent":"0d2b6993-c82c-5b07-b5dc-dd2f02c5bd08","mdx":{"id":"a2bb6cba-161d-5acc-b022-f69e03124d2c","parent":"1474b231-db1b-5d78-ab10-90dc1226b0a7","frontmatter":{"title":""},"exports":{},"rawBody":"A media query\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A media query\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"2f544514-9877-5d5b-b243-614be379ae80","parent":"1474b231-db1b-5d78-ab10-90dc1226b0a7","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"A media query\n","html":"<p>A media query</p>"}}}],"type":{"type":"intrinsic","name":"boolean"},"parent":"8fbec567-4b9b-51db-8d1e-52f828dbc4d7","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useMediaQuery.tsx","description":{"id":"c507a696-8e89-5201-b70f-306f9da3e1b7","parent":"43a91b34-11c0-56f3-9051-f59a1c17c3ab","mdx":{"id":"712b54ea-7e35-596a-b74d-ab93059d06ef","parent":"c507a696-8e89-5201-b70f-306f9da3e1b7","frontmatter":{"title":""},"exports":{},"rawBody":"Match a media query and get updates as the match changes. The media string is\npassed directly to `window.matchMedia` and run as a Layout Effect, so initial\nmatches are returned before the browser has a chance to paint.\n```tsx\nfunction Page() {\n  const isWide = useMediaQuery('min-width: 1000px')\n\n  return isWide ? \"very wide\" : 'not so wide'\n}\n```\n\nMedia query lists are also reused globally, hook calls for the same query\nwill only create a matcher once under the hood.\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Match a media query and get updates as the match changes. The media string is\\npassed directly to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.matchMedia\"), \" and run as a Layout Effect, so initial\\nmatches are returned before the browser has a chance to paint.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"function Page() {\\n  const isWide = useMediaQuery('min-width: 1000px')\\n\\n  return isWide ? \\\"very wide\\\" : 'not so wide'\\n}\\n\")), mdx(\"p\", null, \"Media query lists are also reused globally, hook calls for the same query\\nwill only create a matcher once under the hood.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"2f2747c8-7ecb-5196-bbcc-0d9b4207c543","parent":"c507a696-8e89-5201-b70f-306f9da3e1b7","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"Match a media query and get updates as the match changes. The media string is\npassed directly to `window.matchMedia` and run as a Layout Effect, so initial\nmatches are returned before the browser has a chance to paint.\n```tsx\nfunction Page() {\n  const isWide = useMediaQuery('min-width: 1000px')\n\n  return isWide ? \"very wide\" : 'not so wide'\n}\n```\n\nMedia query lists are also reused globally, hook calls for the same query\nwill only create a matcher once under the hood.\n","html":"<p>Match a media query and get updates as the match changes. The media string is\npassed directly to <code>window.matchMedia</code> and run as a Layout Effect, so initial\nmatches are returned before the browser has a chance to paint.</p>\n<pre><code class=\"language-tsx\">function Page() {\n  const isWide = useMediaQuery('min-width: 1000px')\n\n  return isWide ? \"very wide\" : 'not so wide'\n}\n</code></pre>\n<p>Media query lists are also reused globally, hook calls for the same query\nwill only create a matcher once under the hood.</p>"}}}],"parent":"b6e10b2b-b6f6-5396-bae3-8367e6134559","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useMediaQuery.tsx"},"type":"hook","name":"useMediaQuery","packageName":"@restart/hooks","importName":"import useMediaQuery from '@restart/hooks/useMediaQuery'","tags":[{"name":"param","value":"A media query"}],"example":null,"signatures":[{"kind":"function","name":"useMediaQuery","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Match a media query and get updates as the match changes. The media string is\\npassed directly to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.matchMedia\"), \" and run as a Layout Effect, so initial\\nmatches are returned before the browser has a chance to paint.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"function Page() {\\n  const isWide = useMediaQuery('min-width: 1000px')\\n\\n  return isWide ? \\\"very wide\\\" : 'not so wide'\\n}\\n\")), mdx(\"p\", null, \"Media query lists are also reused globally, hook calls for the same query\\nwill only create a matcher once under the hood.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":[{"name":"query","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A media query\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":null,"type":{"typeDef":null,"name":null,"type":"UnionType","elements":[{"type":"NameExpression","name":"string","typeDef___NODE":null},{"type":"NullLiteral"}],"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null}],"properties":null,"optional":false,"returns":null,"members":{"static":null}}]}},"pageContext":{"nodeId":"1f5a43db-10dc-547a-8c2c-ed20b7106b02","exampleId":null}}}
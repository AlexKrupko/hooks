{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useForceUpdate","result":{"data":{"docpocalypse":{"id":"90ddc6a5-b4fe-52b6-8c4c-58f27b9b2cff","tsType":{"id":"683fbe40-ae8b-5cf9-90b0-a637b4e960a5","name":"useForceUpdate","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"2f5e7024-0f51-5da1-af1a-7ca99d347cf4","name":"useForceUpdate","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Returns a function that triggers a component update. the hook equivalent to\n`this.forceUpdate()` in a class component. In most cases using a state value directly\nis preferable but may be required in some advanced usages of refs for interop or\nwhen direct DOM manipulation is required.","text":"```ts\nconst forceUpdate = useForceUpdate();\n\nconst updateOnClick = useCallback(() => {\n forceUpdate()\n}, [forceUpdate])\n\nreturn <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n```\n"},"type":{"type":"reflection","declaration":{"id":"1f634b95-2eda-5b97-8ef5-f1843b2e6303","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":"2aeed546-e903-5ccf-b88b-4bd3097a6642","name":"__call","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"type":{"type":"intrinsic","name":"void"},"parent":"1f634b95-2eda-5b97-8ef5-f1843b2e6303","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useForceUpdate.ts"}],"parent":"2f5e7024-0f51-5da1-af1a-7ca99d347cf4","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}},"parent":"683fbe40-ae8b-5cf9-90b0-a637b4e960a5","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useForceUpdate.ts","description":{"id":"2fc8d451-9653-599e-9c1f-b662caddc5f5","parent":"2f5e7024-0f51-5da1-af1a-7ca99d347cf4","mdx":{"id":"b5504651-1a6e-5d6c-b956-9232a7c26066","parent":"2fc8d451-9653-599e-9c1f-b662caddc5f5","frontmatter":{"title":""},"exports":{},"rawBody":"Returns a function that triggers a component update. the hook equivalent to\n`this.forceUpdate()` in a class component. In most cases using a state value directly\nis preferable but may be required in some advanced usages of refs for interop or\nwhen direct DOM manipulation is required.\n```ts\nconst forceUpdate = useForceUpdate();\n\nconst updateOnClick = useCallback(() => {\n forceUpdate()\n}, [forceUpdate])\n\nreturn <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n```\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Returns a function that triggers a component update. the hook equivalent to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.forceUpdate()\"), \" in a class component. In most cases using a state value directly\\nis preferable but may be required in some advanced usages of refs for interop or\\nwhen direct DOM manipulation is required.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const forceUpdate = useForceUpdate();\\n\\nconst updateOnClick = useCallback(() => {\\n forceUpdate()\\n}, [forceUpdate])\\n\\nreturn <button type=\\\"button\\\" onClick={updateOnClick}>Hi there</button>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"e99ca6fd-3cfe-51ec-b55e-b20f58a88172","parent":"2fc8d451-9653-599e-9c1f-b662caddc5f5","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"Returns a function that triggers a component update. the hook equivalent to\n`this.forceUpdate()` in a class component. In most cases using a state value directly\nis preferable but may be required in some advanced usages of refs for interop or\nwhen direct DOM manipulation is required.\n```ts\nconst forceUpdate = useForceUpdate();\n\nconst updateOnClick = useCallback(() => {\n forceUpdate()\n}, [forceUpdate])\n\nreturn <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n```\n","html":"<p>Returns a function that triggers a component update. the hook equivalent to\n<code>this.forceUpdate()</code> in a class component. In most cases using a state value directly\nis preferable but may be required in some advanced usages of refs for interop or\nwhen direct DOM manipulation is required.</p>\n<pre><code class=\"language-ts\">const forceUpdate = useForceUpdate();\n\nconst updateOnClick = useCallback(() => {\n forceUpdate()\n}, [forceUpdate])\n\nreturn &#x3C;button type=\"button\" onClick={updateOnClick}>Hi there&#x3C;/button>\n</code></pre>"}}}],"parent":"ab5e167d-7918-5c92-bd81-04fc8e0d67cc","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useForceUpdate.ts"},"type":"hook","name":"useForceUpdate","packageName":"@restart/hooks","importName":"import useForceUpdate from '@restart/hooks/useForceUpdate'","tags":[],"example":null,"signatures":[{"kind":"function","name":"useForceUpdate","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Returns a function that triggers a component update. the hook equivalent to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.forceUpdate()\"), \" in a class component. In most cases using a state value directly\\nis preferable but may be required in some advanced usages of refs for interop or\\nwhen direct DOM manipulation is required.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const forceUpdate = useForceUpdate();\\n\\nconst updateOnClick = useCallback(() => {\\n forceUpdate()\\n}, [forceUpdate])\\n\\nreturn <button type=\\\"button\\\" onClick={updateOnClick}>Hi there</button>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":null,"properties":null,"optional":false,"returns":null,"members":{"static":null}}]}},"pageContext":{"nodeId":"90ddc6a5-b4fe-52b6-8c4c-58f27b9b2cff","exampleId":null}}}
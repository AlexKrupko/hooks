{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useImmediateUpdateEffect","result":{"data":{"docpocalypse":{"id":"d7cf65d4-a5d1-525e-a6e9-321def031388","tsType":{"id":"b6bd81f3-da3e-5b09-9f11-e60f791a819a","name":"useImmediateUpdateEffect","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"aa7e09ed-60cd-5617-9599-465142725a9f","name":"useImmediateUpdateEffect","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An _immediate_ effect that runs an effect callback when its dependency array\nchanges. This is helpful for updates should must run during render, most\ncommonly state derived from props; a more ergonomic version of https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops","text":"```ts\nfunction Example({ value }) {\n  const [intermediaryValue, setValue] = useState(value);\n\n  useImmediateUpdateEffect(() => {\n    setValue(value)\n  }, [value])\n```\n"},"parameters":[{"id":"3a787f36-402b-5094-ac51-509d6a4c0b2f","name":"effect","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"EffectCallback"},"parent":"aa7e09ed-60cd-5617-9599-465142725a9f","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null},{"id":"220c0676-fd12-5000-bddb-036d24583b8d","name":"deps","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"DependencyList"},"parent":"aa7e09ed-60cd-5617-9599-465142725a9f","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"void"},"parent":"b6bd81f3-da3e-5b09-9f11-e60f791a819a","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useImmediateUpdateEffect.ts","description":{"id":"deae22df-8a69-510d-9bdc-a5fd5b0afa32","parent":"aa7e09ed-60cd-5617-9599-465142725a9f","mdx":{"id":"8dedb7d6-2c7a-51bc-9032-d9f8a67cc505","parent":"deae22df-8a69-510d-9bdc-a5fd5b0afa32","frontmatter":{"title":""},"exports":{},"rawBody":"An _immediate_ effect that runs an effect callback when its dependency array\nchanges. This is helpful for updates should must run during render, most\ncommonly state derived from props; a more ergonomic version of https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n```ts\nfunction Example({ value }) {\n  const [intermediaryValue, setValue] = useState(value);\n\n  useImmediateUpdateEffect(() => {\n    setValue(value)\n  }, [value])\n```\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"An \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"immediate\"), \" effect that runs an effect callback when its dependency array\\nchanges. This is helpful for updates should must run during render, most\\ncommonly state derived from props; a more ergonomic version of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\"\n  }), \"https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function Example({ value }) {\\n  const [intermediaryValue, setValue] = useState(value);\\n\\n  useImmediateUpdateEffect(() => {\\n    setValue(value)\\n  }, [value])\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"d187bb84-1be9-55d3-8dc1-9dd46a135b30","parent":"deae22df-8a69-510d-9bdc-a5fd5b0afa32","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"An _immediate_ effect that runs an effect callback when its dependency array\nchanges. This is helpful for updates should must run during render, most\ncommonly state derived from props; a more ergonomic version of https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n```ts\nfunction Example({ value }) {\n  const [intermediaryValue, setValue] = useState(value);\n\n  useImmediateUpdateEffect(() => {\n    setValue(value)\n  }, [value])\n```\n","html":"<p>An <em>immediate</em> effect that runs an effect callback when its dependency array\nchanges. This is helpful for updates should must run during render, most\ncommonly state derived from props; a more ergonomic version of <a href=\"https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\">https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops</a></p>\n<pre><code class=\"language-ts\">function Example({ value }) {\n  const [intermediaryValue, setValue] = useState(value);\n\n  useImmediateUpdateEffect(() => {\n    setValue(value)\n  }, [value])\n</code></pre>"}}}],"parent":"9fa80ef0-b585-5fb0-9eca-30dc4c84a19d","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useImmediateUpdateEffect.ts"},"type":"hook","name":"useImmediateUpdateEffect","packageName":"@restart/hooks","importName":"import useImmediateUpdateEffect from '@restart/hooks/useImmediateUpdateEffect'","tags":[{"name":"category","value":"effects"}],"example":null,"signatures":[{"kind":"function","name":"useImmediateUpdateEffect","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"An \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"immediate\"), \" effect that runs an effect callback when its dependency array\\nchanges. This is helpful for updates should must run during render, most\\ncommonly state derived from props; a more ergonomic version of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\"\n  }), \"https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function Example({ value }) {\\n  const [intermediaryValue, setValue] = useState(value);\\n\\n  useImmediateUpdateEffect(() => {\\n    setValue(value)\\n  }, [value])\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":[{"name":"effect","description":null,"examples":null,"type":{"typeDef":null,"name":"EffectCallback","type":"NameExpression","elements":null,"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null},{"name":"deps","description":null,"examples":null,"type":{"typeDef":null,"name":"DependencyList","type":"NameExpression","elements":null,"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null}],"properties":null,"optional":false,"returns":null,"members":{"static":null}}]}},"pageContext":{"nodeId":"d7cf65d4-a5d1-525e-a6e9-321def031388","exampleId":null}}}
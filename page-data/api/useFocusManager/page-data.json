{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useFocusManager","result":{"data":{"docpocalypse":{"id":"980b7351-1496-5101-9779-414a4966e880","tsType":{"id":"7d9d1ce6-9014-599d-a61c-24775e326835","name":"useFocusManager","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"1575ceb2-7700-5878-89ec-0f2768caf8c9","name":"useFocusManager","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"useFocusManager provides a way to track and manage focus as it moves around\na container element. An `onChange` is fired when focus enters or leaves the\nelement, but not when it moves around inside the element, similar to\n`pointerenter` and `pointerleave` DOM events.","text":"```tsx\nconst [focused, setFocusState] = useState(false)\n\nconst { onBlur, onFocus } = useFocusManager({\n  onChange: nextFocused => setFocusState(nextFocused)\n})\n\nreturn (\n  <div tabIndex=\"-1\" onFocus={onFocus} onBlur={onBlur}>\n    {String(focused)}\n    <input />\n    <input />\n\n    <button>A button</button>\n  </div>\n```\n\n"},"parameters":[{"id":"15ae239a-ea47-5f97-9a56-bcb49cc6d414","name":"opts","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"reference","id":871,"name":"FocusManagerOptions","reference":{"id":"0f7bbf22-e0ca-57f6-9a72-a9f52db58a0c","name":"FocusManagerOptions","kind":256,"kindString":"Interface","flags":{"isExported":true},"groups":[{"title":"Properties","kind":1024,"children":["a8a9ab3b-98de-5b4b-9c7d-f982274259a6"]},{"title":"Methods","kind":2048,"children":["f342f3f6-4dab-5782-85cb-8023928a01c5","e7e7efef-a16b-5b90-bd4e-705b9f209156","331df53e-35b2-5d93-94e2-1d0cd9299dd1"]}],"parent":"41336af2-40a1-54a7-8c99-d7f9db4e86a7","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[{"id":"a8a9ab3b-98de-5b4b-9c7d-f982274259a6","name":"isDisabled","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"When true, the event handlers will not report focus changes"},"type":{"type":"reflection","declaration":{"id":"1428025e-7f34-58be-a2fd-2071f796a973","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":"d9d2920d-ce86-5b04-8e5a-d3fe3916f46e","name":"__call","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"type":{"type":"intrinsic","name":"boolean"},"parent":"1428025e-7f34-58be-a2fd-2071f796a973","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"}],"parent":"a8a9ab3b-98de-5b4b-9c7d-f982274259a6","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"}},"parent":"0f7bbf22-e0ca-57f6-9a72-a9f52db58a0c","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts","description":{"id":"ce5b1246-d2b0-5817-922f-e67d07ef9d59","parent":"a8a9ab3b-98de-5b4b-9c7d-f982274259a6","mdx":{"id":"756f6db1-8b1d-50ee-a752-3768373baf01","parent":"ce5b1246-d2b0-5817-922f-e67d07ef9d59","frontmatter":{"title":""},"exports":{},"rawBody":"When true, the event handlers will not report focus changes","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When true, the event handlers will not report focus changes\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"9a87db00-3093-5af9-b329-10d104d8177b","parent":"ce5b1246-d2b0-5817-922f-e67d07ef9d59","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"When true, the event handlers will not report focus changes","html":"<p>When true, the event handlers will not report focus changes</p>"}}},{"id":"f342f3f6-4dab-5782-85cb-8023928a01c5","name":"didHandle","kind":2048,"kindString":"Method","flags":{"isExported":true,"isOptional":true},"signatures":[{"id":"d93896de-68ab-59b5-916b-1c2f04a86590","name":"didHandle","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"A callback fired after focus is handled but before onChange is called"},"parameters":[{"id":"3c929e2a-8022-5ebe-8e84-996fc2d5849d","name":"focused","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"boolean"},"parent":"d93896de-68ab-59b5-916b-1c2f04a86590","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null},{"id":"e3dfb087-d52c-5f5f-a3f8-cc304238ad06","name":"event","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"reference","name":"FocusEvent"},"parent":"d93896de-68ab-59b5-916b-1c2f04a86590","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"void"},"parent":"f342f3f6-4dab-5782-85cb-8023928a01c5","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts","description":{"id":"dc97a182-c581-526f-a9a3-82e8b4ed6773","parent":"d93896de-68ab-59b5-916b-1c2f04a86590","mdx":{"id":"bc7fed7e-f1df-557b-a08b-5e641cb8ca7a","parent":"dc97a182-c581-526f-a9a3-82e8b4ed6773","frontmatter":{"title":""},"exports":{},"rawBody":"A callback fired after focus is handled but before onChange is called","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A callback fired after focus is handled but before onChange is called\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"65dbe43d-6da2-5c2e-945f-e4e9084a9ab3","parent":"dc97a182-c581-526f-a9a3-82e8b4ed6773","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"A callback fired after focus is handled but before onChange is called","html":"<p>A callback fired after focus is handled but before onChange is called</p>"}}}],"parent":"0f7bbf22-e0ca-57f6-9a72-a9f52db58a0c","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"},{"id":"e7e7efef-a16b-5b90-bd4e-705b9f209156","name":"onChange","kind":2048,"kindString":"Method","flags":{"isExported":true,"isOptional":true},"signatures":[{"id":"c6344eaa-252f-5541-a577-e4550dda5ee6","name":"onChange","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"A callback fired after focus has changed"},"parameters":[{"id":"5b80d7bc-8dd6-552a-b3c5-dcc5d69f38d4","name":"focused","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"boolean"},"parent":"c6344eaa-252f-5541-a577-e4550dda5ee6","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null},{"id":"07678218-b000-5e84-93e9-8a61a99740e4","name":"event","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"reference","name":"FocusEvent"},"parent":"c6344eaa-252f-5541-a577-e4550dda5ee6","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"void"},"parent":"e7e7efef-a16b-5b90-bd4e-705b9f209156","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts","description":{"id":"a1fd597b-8db2-5698-8c79-047424064235","parent":"c6344eaa-252f-5541-a577-e4550dda5ee6","mdx":{"id":"bd9f1d06-ab36-5855-80ef-37166de27950","parent":"a1fd597b-8db2-5698-8c79-047424064235","frontmatter":{"title":""},"exports":{},"rawBody":"A callback fired after focus has changed","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A callback fired after focus has changed\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"3d27a59e-a7d0-50de-8e35-d530d276ff43","parent":"a1fd597b-8db2-5698-8c79-047424064235","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"A callback fired after focus has changed","html":"<p>A callback fired after focus has changed</p>"}}}],"parent":"0f7bbf22-e0ca-57f6-9a72-a9f52db58a0c","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"},{"id":"331df53e-35b2-5d93-94e2-1d0cd9299dd1","name":"willHandle","kind":2048,"kindString":"Method","flags":{"isExported":true,"isOptional":true},"signatures":[{"id":"3ca0e1f8-7909-5a06-9c2c-2784b145ec03","name":"willHandle","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"A callback fired when focus shifts. returning `false` will prevent\nhandling the focus event"},"parameters":[{"id":"35f84258-2fe3-5fde-b911-feebbf86bf7f","name":"focused","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"boolean"},"parent":"3ca0e1f8-7909-5a06-9c2c-2784b145ec03","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null},{"id":"870f0477-f0c7-5ad2-8980-067c063aa0eb","name":"event","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"reference","name":"FocusEvent"},"parent":"3ca0e1f8-7909-5a06-9c2c-2784b145ec03","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]},"parent":"331df53e-35b2-5d93-94e2-1d0cd9299dd1","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts","description":{"id":"3ddaeb21-db40-5ed5-8966-2d6584b86dfe","parent":"3ca0e1f8-7909-5a06-9c2c-2784b145ec03","mdx":{"id":"39e629a3-ad18-5194-a03f-f56fa40a6b14","parent":"3ddaeb21-db40-5ed5-8966-2d6584b86dfe","frontmatter":{"title":""},"exports":{},"rawBody":"A callback fired when focus shifts. returning `false` will prevent\nhandling the focus event","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A callback fired when focus shifts. returning \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" will prevent\\nhandling the focus event\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"6aa54cd5-f56f-5a62-b6c9-8398f32f2e47","parent":"3ddaeb21-db40-5ed5-8966-2d6584b86dfe","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"A callback fired when focus shifts. returning `false` will prevent\nhandling the focus event","html":"<p>A callback fired when focus shifts. returning <code>false</code> will prevent\nhandling the focus event</p>"}}}],"parent":"0f7bbf22-e0ca-57f6-9a72-a9f52db58a0c","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"}],"signatures":[],"parameters":[],"typeParameter":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"}},"parent":"1575ceb2-7700-5878-89ec-0f2768caf8c9","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"reference","id":887,"name":"FocusController","reference":{"id":"1211a0e0-2ed1-5c87-b34a-5aa7ef04f036","name":"FocusController","kind":256,"kindString":"Interface","flags":{"isExported":true},"groups":[{"title":"Properties","kind":1024,"children":["cf0d1bf1-8386-596c-976a-16198ece0634","a32c045f-3085-5b37-a280-943d97f6a432"]}],"parent":"41336af2-40a1-54a7-8c99-d7f9db4e86a7","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[{"id":"cf0d1bf1-8386-596c-976a-16198ece0634","name":"onBlur","kind":1024,"kindString":"Property","flags":{"isExported":true},"type":{"type":"reflection","declaration":{"id":"b5ff2bee-1d44-50ce-94da-2ef0b319d785","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":"6fdefcb1-90da-5019-b5ea-9eb4a760f93f","name":"__call","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"parameters":[{"id":"df33646c-2298-5002-bffc-abb590dde37e","name":"event","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"any"},"parent":"6fdefcb1-90da-5019-b5ea-9eb4a760f93f","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"void"},"parent":"b5ff2bee-1d44-50ce-94da-2ef0b319d785","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"}],"parent":"cf0d1bf1-8386-596c-976a-16198ece0634","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"}},"parent":"1211a0e0-2ed1-5c87-b34a-5aa7ef04f036","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"},{"id":"a32c045f-3085-5b37-a280-943d97f6a432","name":"onFocus","kind":1024,"kindString":"Property","flags":{"isExported":true},"type":{"type":"reflection","declaration":{"id":"8c52b70a-9e6b-58bd-aea1-9d4eb2f92df8","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":"ebdb4f9c-0723-51ef-bf33-d2a74a040bf6","name":"__call","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"parameters":[{"id":"b3922407-d1b6-528b-8da6-0d2357361f05","name":"event","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"any"},"parent":"ebdb4f9c-0723-51ef-bf33-d2a74a040bf6","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"void"},"parent":"8c52b70a-9e6b-58bd-aea1-9d4eb2f92df8","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"}],"parent":"a32c045f-3085-5b37-a280-943d97f6a432","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"}},"parent":"1211a0e0-2ed1-5c87-b34a-5aa7ef04f036","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"}],"signatures":[],"parameters":[],"typeParameter":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"}},"parent":"7d9d1ce6-9014-599d-a61c-24775e326835","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts","description":{"id":"0909a5b1-75cd-5f5d-92e5-d3bd26b44e07","parent":"1575ceb2-7700-5878-89ec-0f2768caf8c9","mdx":{"id":"1a2b3496-e735-5af8-a851-de2e65e4f82a","parent":"0909a5b1-75cd-5f5d-92e5-d3bd26b44e07","frontmatter":{"title":""},"exports":{},"rawBody":"useFocusManager provides a way to track and manage focus as it moves around\na container element. An `onChange` is fired when focus enters or leaves the\nelement, but not when it moves around inside the element, similar to\n`pointerenter` and `pointerleave` DOM events.\n```tsx\nconst [focused, setFocusState] = useState(false)\n\nconst { onBlur, onFocus } = useFocusManager({\n  onChange: nextFocused => setFocusState(nextFocused)\n})\n\nreturn (\n  <div tabIndex=\"-1\" onFocus={onFocus} onBlur={onBlur}>\n    {String(focused)}\n    <input />\n    <input />\n\n    <button>A button</button>\n  </div>\n```\n\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"useFocusManager provides a way to track and manage focus as it moves around\\na container element. An \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" is fired when focus enters or leaves the\\nelement, but not when it moves around inside the element, similar to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pointerenter\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pointerleave\"), \" DOM events.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"const [focused, setFocusState] = useState(false)\\n\\nconst { onBlur, onFocus } = useFocusManager({\\n  onChange: nextFocused => setFocusState(nextFocused)\\n})\\n\\nreturn (\\n  <div tabIndex=\\\"-1\\\" onFocus={onFocus} onBlur={onBlur}>\\n    {String(focused)}\\n    <input />\\n    <input />\\n\\n    <button>A button</button>\\n  </div>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"28076f2f-2d05-5423-82a8-7e2a49edee02","parent":"0909a5b1-75cd-5f5d-92e5-d3bd26b44e07","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"useFocusManager provides a way to track and manage focus as it moves around\na container element. An `onChange` is fired when focus enters or leaves the\nelement, but not when it moves around inside the element, similar to\n`pointerenter` and `pointerleave` DOM events.\n```tsx\nconst [focused, setFocusState] = useState(false)\n\nconst { onBlur, onFocus } = useFocusManager({\n  onChange: nextFocused => setFocusState(nextFocused)\n})\n\nreturn (\n  <div tabIndex=\"-1\" onFocus={onFocus} onBlur={onBlur}>\n    {String(focused)}\n    <input />\n    <input />\n\n    <button>A button</button>\n  </div>\n```\n\n","html":"<p>useFocusManager provides a way to track and manage focus as it moves around\na container element. An <code>onChange</code> is fired when focus enters or leaves the\nelement, but not when it moves around inside the element, similar to\n<code>pointerenter</code> and <code>pointerleave</code> DOM events.</p>\n<pre><code class=\"language-tsx\">const [focused, setFocusState] = useState(false)\n\nconst { onBlur, onFocus } = useFocusManager({\n  onChange: nextFocused => setFocusState(nextFocused)\n})\n\nreturn (\n  &#x3C;div tabIndex=\"-1\" onFocus={onFocus} onBlur={onBlur}>\n    {String(focused)}\n    &#x3C;input />\n    &#x3C;input />\n\n    &#x3C;button>A button&#x3C;/button>\n  &#x3C;/div>\n</code></pre>"}}}],"parent":"41336af2-40a1-54a7-8c99-d7f9db4e86a7","rootDir":"/Users/jquense/src/hooks/src","tsconfig":"/Users/jquense/src/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/jquense/src/hooks/src/useFocusManager.ts"},"type":"hook","name":"useFocusManager","packageName":"@restart/hooks","importName":"import useFocusManager from '@restart/hooks/useFocusManager'","tags":[],"example":null,"signatures":[{"kind":"function","name":"useFocusManager","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"useFocusManager provides a way to track and manage focus as it moves around\\na container element. An \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" is fired when focus enters or leaves the\\nelement, but not when it moves around inside the element, similar to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pointerenter\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pointerleave\"), \" DOM events.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"const [focused, setFocusState] = useState(false)\\n\\nconst { onBlur, onFocus } = useFocusManager({\\n  onChange: nextFocused => setFocusState(nextFocused)\\n})\\n\\nreturn (\\n  <div tabIndex=\\\"-1\\\" onFocus={onFocus} onBlur={onBlur}>\\n    {String(focused)}\\n    <input />\\n    <input />\\n\\n    <button>A button</button>\\n  </div>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":[{"name":"opts","description":null,"examples":null,"type":{"typeDef":null,"name":"FocusManagerOptions","type":"NameExpression","elements":null,"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null}],"properties":null,"optional":false,"returns":[{"name":null,"description":null,"optional":false,"type":{"name":"FocusController","type":"NameExpression","elements":null,"expression":null,"applications":null}}],"members":{"static":null}}]}},"pageContext":{"nodeId":"980b7351-1496-5101-9779-414a4966e880","exampleId":null}}}